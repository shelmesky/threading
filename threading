源码： Lib/threading.py

---------------------------------------------------------------------------------------------

这个模块在底层的thread模块之上构建了高层次的threading接口。
可以参考查看mutex和Queue模块。

dummy_threading模快提供了一个模拟行为，当没有thread模块导致threading模块无法使用时。

注意：从Python 2.6开始，这个模块提供了PEP 8兼容的别名和属性取代替从Java的threading模块API继承来的驼峰命名法。
新的API提供了和multiprocessing模块兼容的API.

注意：从Python 2.5开始，线程出错时抛出RuntimeError错误，而不是AssertionError.

---------------------------------------------------------------------------------------------

Cpython实现细节：在CPython中，因为GIL(Global Interpreter Lock)的存在，在任意时刻只有一个线程可以执行python代码(即使一些性能相关的库也许能突破这个限制)。如果你的应用要求更好的使用多核机器上的计算资源，建议使用multiprocessing模块。
无论如何，如果你想并发的运行多个I/O密集型的任务，threading模块还是非常合适的。


这个模块定义了下面的方法和对象：

threading.active_count()
返回目前活动的Thread对象。
返回的长度和enumrate()函数返回的列表长度相等。

threading.enumerate()
返回当前存活的Thread对象列表。
这个列表包含daemon的线程，和通过current_thread()创建的dummy线程，和主线程。
列表中排除了终止的线程，和没有启动的线程。

threading.Event()
一个工厂函数，返回一个新的event对象。
一个事件对象管理一个标志，这个标志可以使用set()方法设置为true，并且可以使用clear()方法设置为false.
wait()方法阻塞当前线程直到标志变为true.

threading.local
一个存储了线程本地数据的类。线程本地数据是指线程自己定义的。
要管理线程的本地数据，只要创建一个threading.local类实例，并且在实例上存储属性。
mydata = threading.local()
mydata.x = 1
mydata这个对象实例的值，是不同于其他线程的。

threading.Lock()
工厂函数，返回一个锁定原语对象。
一旦一个线程申请到了这个锁，其他线程再去申请锁会导致阻塞，直到锁被释放。
任何线程都可以释放锁。

threading.RLock()
工厂函数，返回一个可重入的锁对象。
一个可重入的锁必须申请它的线程释放(不能由别的线程释放)。
一旦一个线程申请到了这个可重入的锁，同一个线程可以再次申请这个锁，而不会阻塞。
线程必须按照申请锁的顺序来释放锁。

threading.Semaphore([Value])
工厂函数，返回一个新的信号对象。
信号对象管理一个计数器，这个计数器的值是调用release()的次数减去调用acquire()的次数，再加上初始值。
acquire()会一直阻塞，直到计数器不为负值才会返回。
如果没有给出初始Value的值，默认为1.

threading.BoundedSemaphore([Value])
工厂函数，返回一个新的边界信号对象。
一个边界信号对象检查当前的Value，确保它不会超过初始值。
如果超过了初始值，会抛出ValueError错误。
在多数情况下，边界信号用来保证资源保持在有限的容量内。 

threading.Thread
线程的控制类。这个类可以安全的子类化。

threading.Timer
在超过指定的时间后，启动线程执行一个函数。

threading.settrace(func)
为从threading模块启动的线程设置一个trace函数。
在线程的run函数调用之前，这个函数会被传递到每个函数的sys.settrace()。

threading.setprofile(func)
为从threading模块启动的线程设置一个profile函数。
在线程的run函数调用之前，这个函数会被传递到每个函数的sys.setprofile()。

---------------------------------------------------------------------------------------------

Thread Objects
这个类实现了在另外一个线程中运行并控制的行为。
有两种方式实现：一是传递一个callback对象给构造器。二是在子类中重载run()方法。
在子类中不能重载其他方法（__init__构造方法除外）。
就是说，只能在子类中重载__init__()和run()方法。

一旦一个线程的行为是启动的，这个线程就被认为是"alive"。
当线程的run()方法结束时-就是正常结束，或者抛出一个异常，就认为线程处于非活动状态。
is_alive()方法可以检查一个线程是否处于活动状态。

其他线程可以调用线程的join()方法。
这样会阻塞调用线程，直到线程的join()方法调用执行结束。

线程有一个名字. 可以在构造方法中传递这个名字，然后可以通过线程的name属性来读取或者更改线程的名字。

一个线程可以被标志为"daemon线程"。
这个标志的意义是，当daemon线程退出之后，整个python进程才会退出，否则会等待daemon线程退出。
初始化的值是通过继承thread对象得来的。
这个标志可以通过线程的daemon属性设置。

注意：在daemon线程突然退出时（主线程突然关闭）。它们的资源（像打开的文件、数据库事物等等）可能不会正确释放。
如果你希望优雅的停止，确保它们是non-daemonic，并且使用一个合适的信号机制像Event来给线程发信号停止。

经验：当线程的run函数工作在无限循环中时，可以在循环代码的开头判断一个信号，例如Event对象是否set，或者
从队列/管道发来的信号等等。这样下一次循环就会根据信号判断是否需要break无限循环。

有一个"主线程"对象；它就是python进程的初始化线程。它不是一个daemon线程。

"dummy线程"也有可能被创建。这些线程相当与"alien线程"，是threading模块外部启动的线程，例如直接从C代码中启动的。
Dummy线程对象只有一些有限的功能；它们始终被认为是alive并且是daemonic的;
并且不能被join()。它们也不能被删除，因为它们不能被检测并且删除。


class threading.Thread(group=None, target=None, name=None, args=(), kwargs={})
这个构造函数被调用的时候应该始终传递关键字参数。

group 参数应该是None; 保留为将来当ThreadGroup类实现的时候才启用。

target 是被run()方法调用的回调对象。默认是None，意思是没有东西被调用。

name 是线程的名字。默认情况，名字是用"Thread-N"表示的唯一名字，N是小的十进制数。

args 是一个元组参数，并target调用。

kwargs 是一个字典参数，被target调用.

如果子类重载了构造方法,它必须保证在使用线程之前调用基类的构造方法(Thread.__init__()).

start()
启动线程.

对于每个线程,start()方法必须调用一次.
它使线程对象的run()方法在单独的线程中运行.

run()
线程的实现.
你可能会在子类中重载这个方法.
标准的run()方法调用了传递给构造函数的target参数,就是一个回调对象.
如果存在位置参数和关键字参数,也会被分别调用.

注意: 以子类化构造一个线程对象的时候,只有在run()方法内部的代码才会在新启动的线程中运行,子类的其他方法都不会在新线程中运行.
因为start()方法,只让run()方法在新线程中运行.

join([timeout])
等待,直到线程终止.
这个方法阻塞调用线程, 直到被调用线程的join()方法调用结束-正常结束或者抛出一个异常-或者直到指定的时间结束.

当给出timeout参数,并且不为None时, timeout应该是一个浮点数；指定了操作在多少秒内结束.
因为join()方法总会返回None,你必须在join()方法结束后,调用isAlive()来确定超时的发生-如果线程依旧运行,join()调用会超时.


当timeout参数没有给出,或者是None, join()方法会阻塞调用线程, 知道被调用线程终止.

一个线程可以被join()很多次.

当尝试去join()当前线程,但是当前线程有可能发生死锁的时候, join()抛出一个RuntimeError错误.
如果在线程启动之前就调用join(), 同样也会报错.

getName()
setName()
name属性的同名API.

name
线程的名字字符串. 默认由构造函数生成.

ident
线程的ID, 如果线程未启动就是None. 是一个非0的整数.
当一个线程退出, 并且其他线程被创建之后, 线程ID可能会循环使用.
在一个线程退出后, 它的线程ID依然有效.

isAlive()
检查线程是否存活.
只有在线程运行run()方法之后,并且在run()方法结束之前, isAlive()返回True.
threading模块的enumerate()方法返回所有存活的线程列表.



