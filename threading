源码： Lib/threading.py

---------------------------------------------------------------------------------------------

这个模块在底层的thread模块之上构建了高层次的threading接口。
可以参考查看mutex和Queue模块。

dummy_threading模快提供了一个模拟行为，当没有thread模块导致threading模块无法使用时。

注意：从Python 2.6开始，这个模块提供了PEP 8兼容的别名和属性取代替从Java的threading模块API继承来的驼峰命名法。
新的API提供了和multiprocessing模块兼容的API.

注意：从Python 2.5开始，线程出错时抛出RuntimeError错误，而不是AssertionError.

---------------------------------------------------------------------------------------------

Cpython实现细节：在CPython中，因为GIL(Global Interpreter Lock)的存在，在任意时刻只有一个线程可以执行python代码(即使一些性能相关的库也许能突破这个限制)。如果你的应用要求更好的使用多核机器上的计算资源，建议使用multiprocessing模块。
无论如何，如果你想并发的运行多个I/O密集型的任务，threading模块还是非常合适的。


这个模块定义了下面的方法和对象：

threading.active_count()
返回目前活动的Thread对象。
返回的长度和enumrate()函数返回的列表长度相等。

threading.enumerate()
返回当前存活的Thread对象列表。
这个列表包含daemon的线程，和通过current_thread()创建的dummy线程，和主线程。
列表中排除了终止的线程，和没有启动的线程。

threading.Event()
一个工厂函数，返回一个新的event对象。
一个事件对象管理一个标志，这个标志可以使用set()方法设置为true，并且可以使用clear()方法设置为false.
wait()方法阻塞当前线程直到标志变为true.

threading.local
一个存储了线程本地数据的类。线程本地数据是指线程自己定义的。
要管理线程的本地数据，只要创建一个threading.local类实例，并且在实例上存储属性。
mydata = threading.local()
mydata.x = 1
mydata这个对象实例的值，是不同于其他线程的。

threading.Lock()
工厂函数，返回一个锁定原语对象。
一旦一个线程申请到了这个锁，其他线程再去申请锁会导致阻塞，直到锁被释放。
任何线程都可以释放锁。

threading.RLock()
工厂函数，返回一个可重入的锁对象。
一个可重入的锁必须申请它的线程释放(不能由别的线程释放)。
一旦一个线程申请到了这个可重入的锁，同一个线程可以再次申请这个锁，而不会阻塞。
线程必须按照申请锁的顺序来释放锁。

threading.Semaphore([Value])
工厂函数，返回一个新的信号对象。
信号对象管理一个计数器，这个计数器的值是调用release()的次数减去调用acquire()的次数，再加上初始值。
acquire()会一直阻塞，直到计数器不为负值才会返回。
如果没有给出初始Value的值，默认为1.

threading.BoundedSemaphore([Value])
工厂函数，返回一个新的边界信号对象。
一个边界信号对象检查当前的Value，确保它不会超过初始值。
如果超过了初始值，会抛出ValueError错误。
在多数情况下，边界信号用来保证资源保持在有限的容量内。 

threading.Thread
线程的控制类。这个类可以安全的子类化。

threading.Timer
在超过指定的时间后，启动线程执行一个函数。

threading.settrace(func)
为从threading模块启动的线程设置一个trace函数。
在线程的run函数调用之前，这个函数会被传递到每个函数的sys.settrace()。

threading.setprofile(func)
为从threading模块启动的线程设置一个profile函数。
在线程的run函数调用之前，这个函数会被传递到每个函数的sys.setprofile()。

